name: Go CI

on:
  push:
    branches:
      - main
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Check out code
        uses: actions/checkout@v3

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Test with Coverage
        run: go test -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.txt

  version-bump:
    name: Update Version Based on Conventional Commits
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      new_version: ${{ steps.update_version.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 

      - name: Get latest release and bump info
        id: get_latest_release
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            try {
              const releases = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              const latestRelease = releases.data[0];
              if (!latestRelease) {
                return JSON.stringify({ version: '0.0.0', bumpInfo: { major: false, minor: false, patch: false } });
              }
              const version = latestRelease.tag_name.replace('v', '');
              const bumpInfoMatch = latestRelease.body.match(/BUMP_INFO: ({[^}]+})/);
              const bumpInfo = bumpInfoMatch ? JSON.parse(bumpInfoMatch[1]) : { major: false, minor: false, patch: false };
              return JSON.stringify({ version, bumpInfo });
            } catch (e) {
              console.error(e);
              return JSON.stringify({ version: '0.0.0', bumpInfo: { major: false, minor: false, patch: false } });
            }

      - name: Determine version bump
        id: version_bump
        run: |
          latest_release='${{ steps.get_latest_release.outputs.result }}'
          latest_release=$(echo "$latest_release" | sed 's/^"\(.*\)"$/\1/' | sed 's/\\"/"/g')
          
          latest_version=$(echo $latest_release | jq -r '.version')
          bump_info=$(echo $latest_release | jq -r '.bumpInfo')
          echo "Latest version: $latest_version"
          echo "Current bump info: $bump_info"
          
          commits=$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"%s%n%b")
          
          if echo "$commits" | grep -qE '(^|\n)BREAKING CHANGE:' || echo "$commits" | grep -qE '^[^:]+!:'; then
            bump_type="major"
          elif echo "$commits" | grep -qE '^feat(\(.+\))?:'; then
            bump_type="minor"
          else
            bump_type="patch"
          fi
          
          new_bump_info=$(echo $bump_info | jq --arg type $bump_type \
            'if $type == "major" then .major = true | .minor = true | .patch = true
             elif $type == "minor" then .minor = true | .patch = true
             else .patch = true end')
          
          echo "Determined bump type: $bump_type"
          echo "bump_type=${bump_type}" >> $GITHUB_OUTPUT
          echo "new_bump_info=${new_bump_info}" >> $GITHUB_OUTPUT

      - name: Update version
        id: update_version
        run: |
          latest_release='${{ steps.get_latest_release.outputs.result }}'
          latest_release=$(echo "$latest_release" | sed 's/^"\(.*\)"$/\1/' | sed 's/\\"/"/g')
          version=$(echo $latest_release | jq -r '.version')
          bump_type=${{ steps.version_bump.outputs.bump_type }}
          new_bump_info='${{ steps.version_bump.outputs.new_bump_info }}'
          
          echo "Current version: $version"
          echo "Bump type: $bump_type"
          echo "New bump info: $new_bump_info"
          
          if [[ $version == *"-rc."* ]]; then
            IFS='-' read -ra ADDR <<< "$version"
            base_version="${ADDR[0]}"
            rc_version="${ADDR[1]}"
            rc_number="${rc_version#rc.}"
          else
            base_version="$version"
            rc_number=0
          fi
          
          IFS='.' read -ra VER <<< "$base_version"
          
          if [[ $bump_type == "major" ]]; then
            new_version="$((${VER[0]} + 1)).0.0-rc.1"
          elif [[ $bump_type == "minor" ]]; then
            new_version="${VER[0]}.$((${VER[1]} + 1)).0-rc.1"
          else  # patch
            new_version="${VER[0]}.${VER[1]}.$((${VER[2]} + 1))-rc.1"
          fi
          
          echo "New version: $new_version"
          echo "new_version=${new_version}" >> $GITHUB_OUTPUT
          echo "bump_info=${new_bump_info}" >> $GITHUB_OUTPUT

      - name: Create or update RC release
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { new_version, bump_info } = process.env;
            
            try {
              const releases = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              
              const rcRelease = releases.data.find(release => release.tag_name.includes('-rc.'));
              
              const releaseBody = `This is the latest release candidate.

              Version: ${new_version}
              Commit: ${context.sha}
              BUMP_INFO: ${bump_info}`;
              
              if (rcRelease) {
                console.log(`Updating existing RC release: ${rcRelease.tag_name} to ${new_version}`);
                await github.rest.repos.updateRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: rcRelease.id,
                  tag_name: `v${new_version}`,
                  name: `Release Candidate ${new_version}`,
                  body: releaseBody,
                  prerelease: true
                });
              } else {
                console.log(`Creating new RC release: ${new_version}`);
                await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: `v${new_version}`,
                  name: `Release Candidate ${new_version}`,
                  body: releaseBody,
                  prerelease: true
                });
              }
            } catch (error) {
              console.error('Error updating or creating RC release:', error);
              throw error;
            }
        env:
          new_version: ${{ steps.update_version.outputs.new_version }}
          bump_info: ${{ steps.update_version.outputs.bump_info }}

  build:
    name: Build
    needs: [test, version-bump]
    uses: ./.github/workflows/build.yml
    with:
      version: ${{ needs.version-bump.outputs.new_version }}
    secrets: inherit

  upload-dev:
    name: Upload to R2
    needs: [build, version-bump]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    uses: ./.github/workflows/upload-to-r2-dev.yml
    with:
      version: ${{ needs.version-bump.outputs.new_version }}
    secrets: inherit

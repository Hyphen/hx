name: Go CI

on:
  push:
    branches:
      - main
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'
  pull_request:
    branches:
      - main

jobs:
  test:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Check out code
        uses: actions/checkout@v3

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Test with Coverage
        run: go test -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.txt

  version-bump:
    name: Update Version Based on Conventional Commits
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      new_version: ${{ steps.update_version.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 

      - name: Get latest release and bump info
        id: get_latest_release
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const script = require('./.github/scripts/get-latest-release.js')
            return await script({github, context})

      - name: Determine version bump
        id: version_bump
        run: |
          latest_release='${{ steps.get_latest_release.outputs.result }}'
          latest_release=$(echo "$latest_release" | sed 's/^"\(.*\)"$/\1/' | sed 's/\\"/"/g')
          
          latest_version=$(echo $latest_release | jq -r '.version')
          bump_info=$(echo $latest_release | jq -r '.bumpInfo')
          echo "Latest version: $latest_version"
          echo "Current bump info: $bump_info"
          
          echo "Analyzing the last 3 commits:"
          commits=$(git log -n 3 --pretty=format:"%s%n%b")
          
          echo "Commits to analyze:"
          echo "$commits"
          echo "---End of commits---"
          
          if echo "$commits" | grep -qE '(^|\n)BREAKING CHANGE:' || echo "$commits" | grep -qE '^[^:]+!:'; then
            bump_type="major"
          elif echo "$commits" | grep -qE '^feat(\(.+\))?:'; then
            bump_type="minor"
          else
            bump_type="patch"
          fi
          
          new_bump_info=$(echo $bump_info | jq --arg type $bump_type \
            'if $type == "major" then .major = true | .minor = true | .patch = true
             elif $type == "minor" then .minor = true | .patch = true
             else .patch = true end')
          
          echo "Determined bump type: $bump_type"
          echo "bump_type=${bump_type}" >> $GITHUB_OUTPUT
          echo "new_bump_info=$(echo $new_bump_info | jq -c)" >> $GITHUB_OUTPUT

      - name: Update version
        id: update_version
        run: |
          latest_release='${{ steps.get_latest_release.outputs.result }}'
          latest_release=$(echo "$latest_release" | sed 's/^"\(.*\)"$/\1/' | sed 's/\\"/"/g')
          version=$(echo $latest_release | jq -r '.version')
          bump_type=${{ steps.version_bump.outputs.bump_type }}
          current_bump_info=$(echo $latest_release | jq -c '.bumpInfo')
          
          echo "::group::Debug Information"
          echo "Current version: $version"
          echo "Bump type: $bump_type"
          echo "Current bump info: $current_bump_info"
          
          IFS='.-' read -ra VER <<< "$version"
          base_version="${VER[0]}.${VER[1]}.${VER[2]}"
          rc_number="${VER[3]#rc.}" 
          
          echo "Base version: $base_version"
          echo "RC number: $rc_number"
          echo "::endgroup::"
          
          if [[ $bump_type == "major" ]]; then
            new_bump_info=$(echo $current_bump_info | jq -c '.major = true | .minor = true | .patch = true')
            new_version="$((${VER[0]} + 1)).0.0-rc.1"
            echo "New bump info for major: $new_bump_info"
          elif [[ $bump_type == "minor" ]]; then
            new_bump_info=$(echo $current_bump_info | jq -c '.minor = true | .patch = true')
            echo "New bump info for minor: $new_bump_info"
            if [[ $(echo $current_bump_info | jq -r '.minor') == "false" ]]; then
              new_version="${VER[0]}.$((${VER[1]} + 1)).0-rc.1"
              echo "New version for minor bump when minor was false: $new_version"
            else
              if [[ -z "$rc_number" || ! "$rc_number" =~ ^[0-9]+$ ]]; then
                echo "RC number is empty or invalid, setting to 1"
                rc_number=1
              else
                echo "Current RC number: $rc_number"
                rc_number=$((rc_number + 1))
              fi
              new_version="${base_version}-rc.${rc_number}"
              echo "New version for minor bump when minor was true: $new_version"
            fi
          else
            new_bump_info=$(echo $current_bump_info | jq -c '.patch = true')
            echo "New bump info for patch: $new_bump_info"
            if [[ $(echo $current_bump_info | jq -r '.patch') == "false" ]]; then
              new_version="${VER[0]}.${VER[1]}.$((${VER[2]} + 1))-rc.1"
              echo "New version for patch bump when patch was false: $new_version"
            else
              if [[ -z "$rc_number" || ! "$rc_number" =~ ^[0-9]+$ ]]; then
                echo "RC number is empty or invalid, setting to 1"
                rc_number=1
              else
                echo "Current RC number: $rc_number"
                rc_number=$((rc_number + 1))
              fi
              new_version="${base_version}-rc.${rc_number}"
              echo "New version for patch bump when patch was true: $new_version"
            fi
          fi
          
          echo "Final new version: $new_version"
          echo "Final new bump info: $new_bump_info"
          echo "new_version=${new_version}" >> $GITHUB_OUTPUT
          echo "bump_info=${new_bump_info}" >> $GITHUB_OUTPUT

      - name: Create or update RC release
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const script = require('./.github/scripts/update-rc-release.js')
            await script({github, context, core})
        env:
          new_version: ${{ steps.update_version.outputs.new_version }}
          bump_info: ${{ steps.update_version.outputs.bump_info }}

  build:
    name: Build
    needs: [test, version-bump]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    uses: ./.github/workflows/build.yml
    with:
      version: ${{ needs.version-bump.outputs.new_version }}
    secrets: inherit

  upload-dev:
    name: Upload to R2
    needs: [build, version-bump]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    uses: ./.github/workflows/upload-to-r2-dev.yml
    with:
      version: ${{ needs.version-bump.outputs.new_version }}
    secrets: inherit

name: Build

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string

jobs:
  build:
    name: Build on ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            arch: linux
          - os: macos-latest
            goos: darwin
            goarch: amd64
            arch: macos
          - os: macos-latest
            goos: darwin
            goarch: arm64
            arch: macos-arm
          - os: windows-latest
            goos: windows
            goarch: amd64
            arch: windows

    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.22

      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 

      - name: Setup Environment Variables
        run: |
          echo "VERSION=${{ inputs.version }}" >> $GITHUB_ENV
          echo "GOOS=${{ matrix.goos }}" >> $GITHUB_ENV
          echo "GOARCH=${{ matrix.goarch }}" >> $GITHUB_ENV
          echo "CGO_ENABLED=0" >> $GITHUB_ENV
        shell: bash

      - name: Get dependencies
        run: go mod tidy

      - name: Build for Unix-like systems
        if: runner.os != 'Windows'
        run: go build -v -ldflags="-X github.com/Hyphen/cli/cmd/version.Version=${{ env.VERSION }}" -o hyphen-${{ env.VERSION }}-${{ matrix.arch }}
        shell: bash

      - name: Build for Windows
        if: runner.os == 'Windows'
        run: pwsh -Command 'go build -v -ldflags="-X github.com/Hyphen/cli/cmd/version.Version=${{ env.VERSION }}" -o hyphen-${{ env.VERSION }}-${{ matrix.arch }}.exe'

      - name: Verify environment variables
        if: runner.os == 'Windows'
        run: |
          if (-not $env:AZURE_CLIENT_ID) { Write-Error "AZURE_CLIENT_ID is not set" }
          if (-not $env:AZURE_CLIENT_SECRET) { Write-Error "AZURE_CLIENT_SECRET is not set" }
          if (-not $env:AZURE_TENANT_ID) { Write-Error "AZURE_TENANT_ID is not set" }
        shell: pwsh

      - name: Attempt az login
        if: runner.os == 'Windows'
        run: az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Codesign for Windows
        if: runner.os == 'Windows'
        uses: azure/trusted-signing-action@v0.4.0
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: https://eus.codesigning.azure.net/
          trusted-signing-account-name: vscx-codesigning
          certificate-profile-name: vscx-certificate-profile
          files-folder: hyphen-${{ env.VERSION }}-${{ matrix.arch }}.exe
          files-folder-filter: exe
          file-digest: SHA256
          timestamp-rfc3161: http://timestamp.acs.microsoft.com
          timestamp-digest: SHA256

      - name: Set execution permissions
        if: runner.os != 'Windows'
        run: chmod +x hyphen-${{ env.VERSION }}-${{ matrix.arch }}

      - name: Upload binaries for Unix-like systems
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: hyphen-${{ env.VERSION }}-${{ matrix.arch }}
          path: hyphen-${{ env.VERSION }}-${{ matrix.arch }}

      - name: Upload binaries for Windows
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: hyphen-${{ env.VERSION }}-${{ matrix.arch }}
          path: hyphen-${{ env.VERSION }}-${{ matrix.arch }}.exe
